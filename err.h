/*
 *  Copyright (c) 2005, Daniel C. Newman <dan.newman@mtbaldy.us>
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  
 *   + Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  
 *   + Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *  
 *   + Neither the name of mtbaldy.us nor the names of its contributors
 *     may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 *  SUCH DAMAGE.
 */

#if !defined(__ERR_H__)

#define __ERR_H__

#if defined(__cplusplus)
extern "C" {
#endif

/*
 *  ERR_
 *  Return values generated by subroutine calls.  A success, ERR_OK, is
 *  guaranteed to always have the value 0.
 */

#define ERR_OK	     0  /* Success                                         */
#define ERR_EOM      1  /* Success; end-of-message reached                 */

#define ERR_ABORT    2  /* Caller-supplied callback procedure ret'd an err */
#define ERR_BADARGS  3  /* Invalid call arguments supplied                 */
#define ERR_CRC      4  /* CRC test failed                                 */
#define ERR_NO       5  /* Failure; unable to perfrom requested operation  */
#define ERR_NOMEM    6  /* Insufficient virtual memory                     */
#define ERR_RANGE    7  /* Option value is out of range                    */
#define ERR_SYNTAX   8  /* Option file syntax error                        */
#define ERR_TOOLONG  9  /* Specified option name or value is too long      */

/*
 *  For the following errors, errno [WSAGetLastError()] may be consulted
 */
#define ERR_CLOSE   10  /* TCP close() call failed                         */
#define ERR_CONNECT 11  /* TCP connect() call failed                       */
#define ERR_READ    12  /* TCP recv() call failed                          */
#define ERR_RESOLV  13  /* gethostbyname() call failed                     */
#define ERR_SOCK    14  /* TCP socket() call failed                        */
#define ERR_WRITE   15  /* TCP send() or writev() calls failed             */

#define ERR_LAST    15  /* Last defined error code                         */


/*
 *  ERR_LOG_
 *  Reason codes for debugging / logging calls
 */
#define ERR_LOG_ERR    1  /* An error message is being logged    */
#define ERR_LOG_DEBUG  2  /* A debugging message is being logged */

/*
 *  Convert an ERR_ error code to a static printable string
 */
const char *err_strerror(int errcode);

#if defined(__cplusplus)
}
#endif

#endif /* !defined(__ERR_H__) */
